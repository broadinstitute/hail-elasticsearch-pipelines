#!/usr/bin/env python

import os
import argparse

p = argparse.ArgumentParser()
p.add_argument("-k", "--cassandra-keyspace", help="Cassandra keyspace", required=True)
p.add_argument("-t", "--cassandra-table", help="Cassandra table", required=True)
p.add_argument("-i", "--dataset-id", help="Dataset id. Default: vds name")
p.add_argument("--block-size", help="Block size = N", type=int, default=10)
p.add_argument("--export-ref", action="store_true")
p.add_argument("--drop", action="store_true", help="First drop the dataset")

p.add_argument("vds_path", help="Path of the VEP-annotated vds to load")
#p.add_argument("-l", "--local", action="store_true", help="Run hail locally instead of using Spark")
args=p.parse_args()

vds_path=os.path.abspath(args.vds_path)

dataset_id=args.dataset_id or os.path.basename(vds_path).replace(".vds", "")
cassandra_keyspace = args.cassandra_keyspace
cassandra_table = args.cassandra_table

export_ref_arg = ""
if args.export_ref:
    export_ref_arg = "--export-ref"
    dataset_id += "_export_ref"
    cassandra_table += "_export_ref"

drop_arg = "--drop" if args.drop else ""

args.local = True

def run(cmd):
    print(cmd)
    os.system(cmd)


hail_command="hail_local_with_3_cores" if args.local else "hail_with_3_cores"

if os.path.isdir("/mnt/lustre/weisburd/data/reference_data"):
    data_dir = "file:///mnt/lustre/weisburd/data/reference_data"
else:
    data_dir = "/Volumes/hd/seqr-hail/reference_data"

block_size = args.block_size

print("========================================================================")
print("  EXPORT_TO_CASSANDRA %(dataset_id)s " % locals())
print("========================================================================")

print("Running %s on %s:%s" % (hail_command, cassandra_keyspace, cassandra_table))
run("""
    date;
    time %(hail_command)s \
      read -i file://%(vds_path)s \
      annotatevariants vds -r va.clinvar -i %(data_dir)s/clinvar/clinvar_v2016_09_01.vds \
      annotatevariants vds -r va.exac -i %(data_dir)s/exac/exac_v1.vds \
      annotatevariants vds -r va.g1k -i %(data_dir)s/1kg/1kg_wgs_phase3.vds \
      annotatevariants vds -r va.dbnsfp -i %(data_dir)s/dbnsfp/dbNSFP_3.2a_variant.filtered.allhg19_nodup.vds \
      annotatevariants expr -c 'va.vep.sorted_transcript_consequences=va.vep.transcript_consequences.map(c => select(c, amino_acids, biotype, canonical, cdna_start, cdna_end, codons, consequence_terms, distance, domains, exon, gene_id, transcript_id, protein_id, gene_symbol, gene_symbol_source, hgnc_id, hgvsc, hgvsp, lof, lof_flags, lof_filter, lof_info)).sortBy(c =>
            let is_coding=(c.biotype=="protein_coding") and is_most_severe=c.consequence_terms.toSet.contains(va.vep.most_severe_consequence) and is_canonical=(c.canonical==1) in
                if(is_coding)
                    if(is_most_severe)
                        if(is_canonical)  1  else  2
                    else  3
                else
                    if(is_most_severe)
                        if(is_canonical)  4  else  5
                    else  6
            )' \
      exportvariantscass %(drop_arg)s %(export_ref_arg)s --block-size %(block_size)s -k %(cassandra_keyspace)s -t %(cassandra_table)s -a 69.173.112.35 -v '
        dataset_id="%(dataset_id)s",
        chrom=v.contig,
        start=v.start,
        end=v.start + v.ref.length - 1,
        ref=v.ref,
        alt=v.alt,
        filters = va.filters,
        pass = va.pass,
        rsid = va.rsid,

        was_split = va.wasSplit,
        clinvar_clinsig = va.clinvar.clinical_significance,
        clinvar_review_status = va.clinvar.review_status,
        clinvar_inheritance_mode = va.clinvar.inheritance_modes.split(";").toSet,
        clinvar_disease_mechanism = va.clinvar.disease_mechanism.split(";").toSet,
        clinvar_gold_stars = va.clinvar.gold_stars,
        clinvar_is_pathogenic = va.clinvar.pathogenic,
        clinvar_is_conflicted = va.clinvar.conflicted,

        vep_gene_id = va.vep.transcript_consequences.map( x => x.gene_id ).toSet,
        vep_transcript_id = va.vep.transcript_consequences.map( x => x.transcript_id ).toSet,
        vep_most_severe_consequence = va.vep.most_severe_consequence,

        g1k_wgs_phase3_popmax_af = va.g1k.info.POPMAX_AF,
        g1k_wgs_phase3_popmax = va.g1k.info.POPMAX,
        exac_v1_popmax = va.exac.info.POPMAX[va.exac.aIndex-1],
        twinsuk_af = va.dbnsfp.TWINSUK_AF.toDouble,
        alspac_af = va.dbnsfp.ALSPAC_AF.toDouble,
        esp65000_aa_af = va.dbnsfp.ESP6500_AA_AF.toDouble,
        esp65000_ea_af = va.dbnsfp.ESP6500_EA_AF.toDouble,

        dbnsfp_sift_pred = va.dbnsfp.SIFT_pred,
        dbnsfp_polyphen2_hdiv_pred = va.dbnsfp.Polyphen2_HDIV_pred,
        dbnsfp_polyphen2_hvar_pred = va.dbnsfp.Polyphen2_HVAR_pred,
        dbnsfp_lrt_pred = va.dbnsfp.LRT_pred,
        dbnsfp_muttaster_pred = va.dbnsfp.MutationTaster_pred,
        dbnsfp_mutassesor_pred = va.dbnsfp.MutationAssessor_pred,
        dbnsfp_fathmm_pred = va.dbnsfp.FATHMM_pred,
        dbnsfp_provean_pred = va.dbnsfp.PROVEAN_pred,
        dbnsfp_metasvm_pred = va.dbnsfp.MetaSVM_pred,
        dbnsfp_metalr_pred = va.dbnsfp.MetaLR_pred,
        dbnsfp_cadd_phred = va.dbnsfp.CADD_phred,
        vep_annotations_sorted = json(va.vep.sorted_transcript_consequences),
        vep_consequences=va.vep.transcript_consequences.map( x => x.consequence_terms ).flatten().toSet,
        clinvar_submitter = va.clinvar.all_submitters.split(";").toSet,
        clinvar_trait = va.clinvar.all_traits.split(";").toSet,
        clinvar_pmid = va.clinvar.all_pmids.split(";").toSet,
        clinvar_age_of_onset = va.clinvar.age_of_onset.split(";").toSet,
        clinvar_prevalence = va.clinvar.prevalence.split(";").toSet,
        clinvar_origin = va.clinvar.origin.split(";").toSet,
        clinvar_xrefs = va.clinvar.xrefs
        ' \
      -g 'num_alt = if(g.isCalled) g.nNonRefAlleles else -1,
        gq = if(g.isCalled) g.gq else NA:Int,
        ab = let s=g.ad.sum in if(g.isCalled && s != 0) (g.ad[0] / s).toFloat else NA:Float,
        dp = if(g.isCalled) g.dp else NA:Int,
        pl = if(g.isCalled) g.pl else NA:Array[Int]';
    date;
    """ % locals())

"""
date;
time %(hail_command)s \
  read -i file://%(vds_path)s \
  exportvariantscass -k %(cassandra_keyspace)s -t %(cassandra_table)s -a 69.173.112.35 -v '
    dataset_id="%(dataset_id)s",
    chrom=v.contig,
    start=v.start,
    end=v.start + v.ref.length - 1,
    ref=v.ref,
    alt=v.alt
    ' \
  -g 'num_alt = if(g.isCalled) g.nNonRefAlleles else -1'
date;
"""
